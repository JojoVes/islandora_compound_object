<?php

/**
 * @file
 * Islandora Compound Object Solution Pack.
 *
 * Enables parent-child relationships between objects with navigation features.
 *
 * Hook implementations and general functions.
 */

use Drupal\islandora\Controller\DefaultController;
use Drupal\islandora\MimeDetect;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Symfony\Component\HttpFoundation\RedirectResponse;

// Constants.
// @codingStandardsIgnoreStart
const ISLANDORA_COMPOUND_OBJECT_CMODEL = 'islandora:compoundCModel';
const ISLANDORA_COMPOUND_OBJECT_LEGACY_BACKEND = 'islandora_compound_object_legacy_sparql';
const ISLANDORA_COMPOUND_OBJECT_SPARQL_BACKEND = 'islandora_compound_object_sparql_query_backend';
// @codingStandardsIgnoreEnd

/**
 * Implements hook_theme().
 */
function islandora_compound_object_theme($existing, $type, $theme, $path) {
  return [
    'islandora_compound_prev_next' => [
      'file' => 'theme/theme.inc',
      'template' => 'islandora-compound-prev-next',
      'pattern' => 'islandora_compound_prev_next__',
      'variables' => [
        'parent_label' => NULL,
        'parent_url' => NULL,
        'previous_pid' => NULL,
        'next_pid' => NULL,
        'child_count' => NULL,
        'siblings' => NULL,
        'themed_siblings' => NULL,
        'islandora_compound_title' => NULL,
        'parent_pid' => NULL,
        'pid' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_CMODEL_PID_islandora_object_purged().
 */
function islandora_compound_object_islandora_compoundcmodel_islandora_object_purged($pid) {
  $parts = islandora_compound_object_get_parts($pid);
  $rels_predicate = \Drupal::config('islandora_compound_object.settings')->get('islandora_compound_object_relationship');
  foreach ($parts as $part) {
    $escaped_pid = str_replace(':', '_', $pid);
    $child_object = islandora_object_load($part);
    $child_object->relationships->remove(FEDORA_RELS_EXT_URI, $rels_predicate, $pid);
    $child_object->relationships->remove(ISLANDORA_RELS_EXT_URI, "isSequenceNumberOf$escaped_pid");
  }
}

/**
 * Implements hook_islandora_required_objects().
 */
function islandora_compound_object_islandora_required_objects(IslandoraTuque $connection) {
  $module_path = drupal_get_path('module', 'islandora_compound_object');

  $compound_content_model = $connection->repository->constructObject(ISLANDORA_COMPOUND_OBJECT_CMODEL);
  $compound_content_model->owner = 'fedoraAdmin';
  $compound_content_model->label = 'Islandora Compound Object Content Model';
  $compound_content_model->models = 'fedora-system:ContentModel-3.0';

  $datastream = $compound_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'application/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_compound_ds_composite_model.xml", FALSE);
  $compound_content_model->ingestDatastream($datastream);

  $compound_collection = $connection->repository->constructObject('islandora:compound_collection');
  $compound_collection->owner = 'fedoraAdmin';
  $compound_collection->label = 'Compound Collection';
  $compound_collection->models = 'islandora:collectionCModel';
  $compound_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');

  $datastream = $compound_collection->constructDatastream('COLLECTION_POLICY', 'X');
  $datastream->label = 'Collection policy';
  $datastream->mimetype = 'application/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_compound_collection_policy.xml", FALSE);
  $compound_collection->ingestDatastream($datastream);

  $datastream = $compound_collection->constructDatastream('TN', 'M');
  $datastream->label = 'Thumbnail';
  $datastream->mimetype = 'image/png';
  $datastream->setContentFromFile("$module_path/images/folder.png", FALSE);
  $compound_collection->ingestDatastream($datastream);

  return [
    'islandora_compound_object' => [
      'title' => 'Islandora compound object',
      'objects' => [
        $compound_content_model,
        $compound_collection,
      ],
    ],
  ];
}

/**
 * Implements hook_xml_form_builder_forms().
 */
function islandora_compound_object_xml_form_builder_forms() {
  $module_path = drupal_get_path('module', 'islandora_compound_object');
  return [
    'Compound Object MODS form' => [
      'form_file' => "$module_path/xml/islandora_compound_form_mods.xml",
    ],
  ];
}

/**
 * Implements hook_xml_form_builder_form_associations().
 */
function islandora_compound_object_xml_form_builder_form_associations() {
  return [
    'islandora_compound_mods_form' => [
      'content_model' => ISLANDORA_COMPOUND_OBJECT_CMODEL,
      'form_name' => 'Compound Object MODS form',
      'dsid' => 'MODS',
      'title_field' => ['titleInfo', 'title'],
      'transform' => 'mods_to_dc.xsl',
      'template' => FALSE,
    ],
  ];
}

/**
 * Implements hook_islandora_cmodel_islandora_view_object().
 */
function islandora_compound_object_islandora_compoundcmodel_islandora_view_object($object) {
  module_load_include('inc', 'islandora', 'includes/utilities');
  $to_return = [];
  $children = islandora_compound_object_get_parts($object->id);
  // View for compound objects that are parents.
  if (!empty($children)) {
    $first_child_id = reset($children);
    if ($first_child_id != $object->id) {
      if (\Drupal::config('islandora_compound_object.settings')->get('islandora_compound_object_redirect_to_first')) {
        // Redirect to the first child of a compound.
        $redirect_path = Url::fromRoute('islandora.view_object', ['object' => $first_child_id])->toString();
        $response = new RedirectResponse($redirect_path);
        $request = \Drupal::request();
        // Save the session so things like messages get saved.
        $request->getSession()->save();
        $response->prepare($request);
        // Make sure to trigger kernel events.
        \Drupal::service('kernel')->terminate($request, $response);
        $response->send();
      }
      else {
        // Get view of first child.
        $first_child = islandora_object_load($first_child_id);

        // XXX: This is a hacky way to get around the change from
        // islandora_view_object() to viewObject in the Default Controller in
        // Islandora. It will end up calling this function back, and if this
        // function returns empty, then islandora_default_islandora_view_object
        // is called from controller->viewObject().
        $controller = DefaultController::create(Drupal::getContainer());
        $to_return = $controller->viewObject($first_child, Drupal::request());
        $to_return['#title'] = $first_child->label;
      }
    }
  }
  // JAIL view for objects that are parents or children.
  // Moved to this hook from hook_menu_local_tasks_alter as part of Drupal 8
  // port, since drupal_set_title is deprecated and there is no way to set the
  // title from that hook anymore.
  if (\Drupal::config('islandora_compound_object.settings')->get('islandora_compound_object_use_jail_view')) {
    $compound_info = islandora_compound_object_retrieve_compound_info($object, TRUE);
    if ($compound_info) {
      if ($object->id == $compound_info['parent_pid']) {
        // We are the parent so don't repeat the label twice.
        $to_return['#title'] = $compound_info['parent_label'];
      }
      else {
        // Display both the parent and child label.
        // XXX: Related to how Islandora\DefaultController::viewObject works:
        // This hook used to return empty for child objects, meaning viewObject
        // would call islandora_default_islandora_view_object(). When this hook
        // does not return empty, we need to set the rest of the render array
        // to fill out the information for the page. If we were to call
        // viewObject from here, there would be an endless loop of function
        // calls, with this never returning empty, so we must call
        // islandora_default_islandora_view_object directly to view child
        // objects from this hook.
        $to_return = islandora_default_islandora_view_object($object);
        $to_return['#title'] = t('@parent - @child', [
          '@parent' => $compound_info['parent_label'],
          '@child' => $compound_info['label'],
        ]);
      }
    }
  }
  return $to_return;
}

/**
 * Access callback for compound object management.
 */
function islandora_compound_object_access(AbstractObject $object) {
  return islandora_object_access('administer compound relationships', $object);
}

/**
 * Implements hook_CMODEL_islandora_derivative().
 */
function islandora_compound_object_islandora_compoundcmodel_islandora_derivative(AbstractObject $object = NULL, $ds_modified_params = []) {
  $module_path = drupal_get_path('module', 'islandora_compound_object');
  $derivatives = [];
  if (\Drupal::config('islandora_compound_object.settings')->get('islandora_compound_object_tn_deriv_hooks')) {
    $derivatives[] = [
      'source_dsid' => NULL,
      'destination_dsid' => 'TN',
      'function' => ['islandora_compound_object_create_thumbnail'],
      'file' => "$module_path/includes/derivatives.inc",
    ];
  }

  return $derivatives;

}

/**
 * Implements hook_islandora_derivative().
 */
function islandora_compound_object_islandora_derivative(AbstractObject $object = NULL, $ds_modified_params = []) {
  $module_path = drupal_get_path('module', 'islandora_compound_object');
  $derivatives = [];
  // Short circuit if feature is disabled.
  if (\Drupal::config('islandora_compound_object.settings')->get('islandora_compound_object_tn_deriv_hooks')) {
    $derivatives[] = [
      'source_dsid' => 'TN',
      'destination_dsid' => NULL,
      'function' => ['islandora_compound_object_create_thumbnail_on_parent'],
      'file' => "$module_path/includes/derivatives.inc",
    ];
  }
  return $derivatives;
}

/**
 * Update a parent object's TN by deriving it's first child's TN.
 *
 * Note: This method does not enforce the relationship between
 * parent/child if both are provided. It is left up to the caller
 * to ensure that objects provided have the appropriate relationship.
 *
 * @param AbstractObject $parent
 *   The compound object.
 * @param AbstractObject $child
 *   The child object (optional). Note: Ideally, this would be required.
 *   Keeping it optional for backwards compatibility.
 */
function islandora_compound_object_update_parent_thumbnail(AbstractObject $parent, AbstractObject $child = NULL) {
  module_load_include('inc', 'islandora', 'includes/utilities');

  // Leaving this part in for backwards compatibility. As per doc comment,
  // it would be ideal for the caller to be required to provide both objects.
  if ($child == NULL) {
    $parts = islandora_compound_object_get_parts($parent->id);
    if (!empty($parts)) {
      $child = islandora_object_load($parts[0]);
    }
  }
  if ($child != NULL && !empty($child['TN'])) {
    $mime_detector = new MimeDetect();
    $ext = $mime_detector->getExtension($child['TN']->mimeType);
    // Windows will likely store temp data in a temp directory
    // rather than in memory. Since the colon is forbidden in
    // filenames, replace it with an underscore instead.
    $thumbnail_id = ((islandora_deployed_on_windows()) ? str_replace(':', '_', $child->id) : $child->id);
    $file = \Drupal::service("file_system")->realpath("temporary://{$thumbnail_id}_TN.{$ext}");
    $child['TN']->getContent($file);
    if (empty($parent['TN'])) {
      $ds = $parent->constructDatastream('TN', 'M');
      $ds->setContentFromFile($file, TRUE);
      $ds->label = $child['TN']->label;
      $ds->mimetype = $child['TN']->mimetype;
      $parent->ingestDatastream($ds);
    }
    else {
      // Check the size and then the content for equality.
      // Only set if both are unequal.
      if (($parent['TN']->size != $child['TN']->size) &&
        $parent['TN']->content != $child['TN']->content) {
        // Check label equality before setting label.
        if ($parent['TN']->label != $child['TN']->label) {
          $parent['TN']->label = $child['TN']->label;
        }
        // Check mimetype equality before setting mimetype.
        if ($parent['TN']->mimeType != $child['TN']->mimetype) {
          $parent['TN']->mimetype = $child['TN']->mimetype;
        }
        $parent['TN']->setContentFromFile($file, TRUE);
      }
    }
    file_unmanaged_delete($file);
  }
  // Child doesn't have a thumbnail then we can't set the parents TN either.
  elseif (isset($parent['TN'])) {
    $parent->purgeDatastream('TN');
  }
}

/**
 * Implements hook_islandora_basic_collection_get_query_optionals().
 */
function islandora_compound_object_islandora_basic_collection_get_query_optionals($type) {
  if (\Drupal::config('islandora_compound_object.settings')->get('islandora_compound_object_hide_child_objects_ri')) {
    if ($type == 'view') {
      return strtr('?object <!uri!pred> ?compound', [
        '!uri' => FEDORA_RELS_EXT_URI,
        '!pred' => \Drupal::config('islandora_compound_object.settings')->get('islandora_compound_object_relationship'),
      ]);
    }
  }
}

/**
 * Implements hook_islandora_basic_collection_get_query_filters().
 */
function islandora_compound_object_islandora_basic_collection_get_query_filters($type) {
  if (\Drupal::config('islandora_compound_object.settings')->get('islandora_compound_object_hide_child_objects_ri')) {
    if ($type == 'view') {
      return '!bound(?compound)';
    }
  }
}

/**
 * Implements hook_islandora_solr_query().
 */
function islandora_compound_object_islandora_solr_query($islandora_solr_query) {
  if (\Drupal::config('islandora_compound_object.settings')->get('islandora_compound_object_hide_child_objects_solr')) {
    $fq = \Drupal::config('islandora_compound_object.settings')->get('islandora_compound_object_solr_fq');
    if (!empty($fq)) {
      $islandora_solr_query->solrParams['fq'][] = $fq;
    }
  }
}

/**
 * Return an array of pids that are part of a compound object.
 */
function islandora_compound_object_get_parts($pid, $ret_title = FALSE) {

  $backend = \Drupal::config('islandora_compound_object.settings')->get('islandora_compound_object_query_backend');
  $backends = \Drupal::moduleHandler()->invokeAll('islandora_compound_object_query_backends');

  if (!isset($backends[$backend])) {
    $backend = ISLANDORA_COMPOUND_OBJECT_LEGACY_BACKEND;
  }

  if (isset($backends[$backend]['file'])) {
    require_once $backends[$backend]['file'];
  }

  $results = call_user_func($backends[$backend]['callable'], $pid);

  if ($ret_title) {
    $objects = $results;
  }
  else {
    $objects = [];
    foreach ($results as $result) {
      $objects[] = $result['pid'];
    }
  }

  return $objects;
}

/**
 * Access callback for tabs that aren't tabs.
 *
 * @param AbstractObject $object
 *   An AbstractObject representing a Fedora object.
 *
 * @return bool
 *   TRUE if the user has access, FALSE otherwise.
 */
function islandora_compound_object_task_access(AbstractObject $object) {
  $rels_predicate = \Drupal::config('islandora_compound_object.settings')->get('islandora_compound_object_relationship');
  $part_of = $object->relationships->get(FEDORA_RELS_EXT_URI, $rels_predicate);
  if (\Drupal::config('islandora_compound_object.settings')->get('islandora_compound_object_use_jail_view') && islandora_object_access(ISLANDORA_VIEW_OBJECTS, $object) &&
    ((in_array(ISLANDORA_COMPOUND_OBJECT_CMODEL, $object->models) && islandora_compound_object_children_exist($object)) || !empty($part_of))) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Helper to see if a compound has children on it.
 *
 * @param AbstractObject $object
 *   An AbstractObject representing an object within Fedora.
 *
 * @return bool
 *   TRUE if the object has compound children, FALSE otherwise.
 */
function islandora_compound_object_children_exist(AbstractObject $object) {
  $rels_predicate = \Drupal::config('islandora_compound_object.settings')->get('islandora_compound_object_relationship');
  $query = <<<EOQ
PREFIX islandora-rels-ext: <http://islandora.ca/ontology/relsext#>
SELECT ?object
FROM <#ri>
WHERE {
  ?object <fedora-model:label> ?title ;
          <fedora-rels-ext:$rels_predicate> <info:fedora/{$object->id}>
}
EOQ;
  return $object->repository->ri->countQuery($query, 'sparql') > 0;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function islandora_compound_object_menu_local_tasks_alter(&$data, $route_name) {
  if (\Drupal::config('islandora_compound_object.settings')->get('islandora_compound_object_use_jail_view')) {
    if ($route_name === 'islandora.view_object') {
      $compound_object = \Drupal::routeMatch()->getParameter('object');
      $compound_info = islandora_compound_object_retrieve_compound_info($compound_object, TRUE);
      if (isset($data['tabs'][0])) {
        foreach ($data['tabs'][0] as $key => &$tab) {
          if ($tab['#link']['url']->getRouteName() == 'islandora_compound_object.count') {
            if (!empty($compound_info)) {
              $tab['#theme'] = 'container';
              $tab['#attributes'] = [
                'id' => 'islandora-compound-sequence-position',
              ];
              $tab['#children'] = t('@seq of @total', [
                '@seq' => $compound_info['sequence'],
                '@total' => $compound_info['child_count'],
              ]);
            }
            else {
              unset($data['tabs'][0][$key]);
            }
          }
          elseif ($tab['#link']['url']->getRouteName() == 'islandora_compound_object.previous') {
            if (!empty($compound_info['previous_pid'])) {
              $tab['#theme'] = 'container';
              $tab['#attributes'] = [
                'id' => 'islandora-compound-previous-link',
              ];
              $tab['#children'] = Link::fromTextAndUrl(t('Previous'), Url::fromRoute('islandora.view_object', ['object' => $compound_info['previous_pid']]));
            }
            else {
              unset($data['tabs'][0][$key]);
            }
          }
          elseif ($tab['#link']['url']->getRouteName() == 'islandora_compound_object.next') {
            if (!empty($compound_info['next_pid'])) {
              $tab['#theme'] = 'container';
              $tab['#attributes'] = [
                'id' => 'islandora-compound-next-link',
              ];
              $tab['#children'] = Link::fromTextAndUrl(t('Next'), Url::fromRoute('islandora.view_object', ['object' => $compound_info['next_pid']]));
            }
            else {
              unset($data['tabs'][0][$key]);
            }
          }
        }
      }
    }
  }
}

/**
 * Helper function to retrieve relevant information about the compound.
 *
 * @param AbstractObject $object
 *   An AbstractObject representing an object within Fedora.
 * @param bool $allow_parent
 *   (Optional) If this is set to true, then this function will return
 *   information about the compound if the passed in object is either
 *   a parent or a child, otherwise it will return an empty array.
 *
 * @return array
 *   An array describing the compound containing:
 *   -parent_label: A string holding the parent label of the compound.
 *   -parent_pid: A string holding the pid of the root compound.
 *   -parent_url: A string containing the URL to the manage link for the root
 *   compound, bool FALSE if the current user does not have access.
 *   -previous_pid: A string with the pid of the previous pid in the sequence,
 *   an empty string if one does not exist.
 *   -next_pid: A string with the pid of the next pid in the sequence, an empty
 *   string if one does not exist.
 *   -current_pid: Either the PID of the object passed in, or the first child
 *   if the object passed in is the parent.
 *   -child_count: An integer of the number of children the object has.
 *   -siblings: An array containing the siblings of the compound.
 *   -siblings_detailed: An array containing the details of sibling objects.
 *   -pid: A string that is the pid of the current object we are on.
 *   -label: A string containing the label of the object.
 *   -sequence: An integer that is the sequence number of the current object.
 *   Or an empty array is the object is the parent of a compound and
 *   $allow_parent is false.
 */
function islandora_compound_object_retrieve_compound_info(AbstractObject $object, $allow_parent = FALSE) {
  $rels_predicate = \Drupal::config('islandora_compound_object.settings')->get('islandora_compound_object_relationship');
  $part_of = $object->relationships->get(FEDORA_RELS_EXT_URI, $rels_predicate);
  $info = [];

  // This object is the child of a compound object.
  if (!empty($part_of)) {
    // XXX: Handle the case where we are a member of multiple compounds?
    // For now just grab the last value in the array.
    $part = array_pop($part_of);
    $parent_pid = $part['object']['value'];
    $parent = islandora_object_load($parent_pid);
  }
  // Assume this object is the parent compound object.
  else {
    if (!$allow_parent) {
      return [];
    }

    $parent_pid = $object->id;
    $parent = $object;
  }

  $siblings_detailed = islandora_compound_object_get_parts($parent_pid, TRUE);
  if (!empty($siblings_detailed)) {
    $siblings = array_keys($siblings_detailed);
    $current_key = ($parent === $object) ? 0 : array_search($object->id, $siblings);
    $previous_pid = (isset($siblings[$current_key - 1])) ? $siblings[$current_key - 1] : '';
    $next_pid = (isset($siblings[$current_key + 1])) ? $siblings[$current_key + 1] : '';

    // Check if perms to show link for parent manage.
    if (islandora_object_manage_access_callback([
      ISLANDORA_METADATA_EDIT,
      ISLANDORA_MANAGE_PROPERTIES,
      ISLANDORA_ADD_DS,
    ], $parent)) {
      $parent_url = 'islandora/object/' . $parent_pid . '/manage';
    }
    else {
      $parent_url = FALSE;
    }

    $info = [
      'parent_label' => $parent->label,
      'parent_pid' => $parent_pid,
      'parent_url' => $parent_url,
      'previous_pid' => $previous_pid,
      'next_pid' => $next_pid,
      'current_pid' => $siblings[$current_key],
      'child_count' => count($siblings),
      'siblings' => $siblings,
      'siblings_detailed' => $siblings_detailed,
      'pid' => $object->id,
      'label' => $object->label,
      'sequence' => $current_key + 1,
    ];
  }
  return $info;
}

/**
 * Implements hook_islandora_compound_object_management_control_paths().
 */
function islandora_compound_object_islandora_compound_object_management_control_paths() {
  return [
    'islandora/object/%',
    'islandora/object/%/view',
  ];
}

/**
 * Implements hook_islandora_get_breadcrumb_query_predicates().
 */
function islandora_compound_object_islandora_get_breadcrumb_query_predicates(AbstractObject $object) {
  if (\Drupal::config('islandora_compound_object.settings')->get('islandora_compound_object_show_compound_parents_in_breadcrumbs')) {
    return [
      strtr('fedora-rels-ext:!compound_rels', ['!compound_rels' => \Drupal::config('islandora_compound_object.settings')->get('islandora_compound_object_relationship')]),
    ];
  }
}

/**
 * Implements hook_islandora_compound_object_query_backends().
 */
function islandora_compound_object_islandora_compound_object_query_backends() {
  $module_path = drupal_get_path('module', 'islandora_compound_object');

  return [
    ISLANDORA_COMPOUND_OBJECT_LEGACY_BACKEND => [
      'title' => t('(Default) Legacy SPARQL - Does a SPARQL query followed by an access check.'),
      'callable' => 'islandora_compound_object_legacy_query_sparql',
      'file' => "$module_path/includes/backends.inc",
    ],
    ISLANDORA_COMPOUND_OBJECT_SPARQL_BACKEND => [
      'title' => t('SPARQL - Does a SPARQL query with filters. Generally faster than the default option.'),
      'callable' => 'islandora_compound_object_query_sparql',
      'file' => "$module_path/includes/backends.inc",
    ],
  ];
}

/**
 * Implements hook_library_info_alter().
 */
function islandora_compound_object_library_info_alter(&$libraries, $extension) {
  if ($extension === 'islandora_compound_object') {
    $jail_path = libraries_get_path('JAIL');
    $libraries['jail']['js'][file_create_url("$jail_path/lib/jquery.js")] = [];
    $libraries['jail']['js'][file_create_url("$jail_path/dist/jail.min.js")] = [];
  }
}
